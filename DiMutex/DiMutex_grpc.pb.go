// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dimutex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiMutexClient is the client API for DiMutex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiMutexClient interface {
	RequestAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessGrant, error)
	AnswerRequest(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*RequestAnswer, error)
	//rpc GrantAccess () returns () {} //when a node has been decided to get access -> måske ikke nødvendigt hvis logikken der finder "vinderen" laves i RequestAccess?
	ReleaseAccess(ctx context.Context, in *ReleaseMessage, opts ...grpc.CallOption) (*ReleaseMessage, error)
	HoldAndRelease(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type diMutexClient struct {
	cc grpc.ClientConnInterface
}

func NewDiMutexClient(cc grpc.ClientConnInterface) DiMutexClient {
	return &diMutexClient{cc}
}

func (c *diMutexClient) RequestAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessGrant, error) {
	out := new(AccessGrant)
	err := c.cc.Invoke(ctx, "/DiMutex.DiMutex/RequestAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diMutexClient) AnswerRequest(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*RequestAnswer, error) {
	out := new(RequestAnswer)
	err := c.cc.Invoke(ctx, "/DiMutex.DiMutex/AnswerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diMutexClient) ReleaseAccess(ctx context.Context, in *ReleaseMessage, opts ...grpc.CallOption) (*ReleaseMessage, error) {
	out := new(ReleaseMessage)
	err := c.cc.Invoke(ctx, "/DiMutex.DiMutex/ReleaseAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diMutexClient) HoldAndRelease(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/DiMutex.DiMutex/HoldAndRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiMutexServer is the server API for DiMutex service.
// All implementations must embed UnimplementedDiMutexServer
// for forward compatibility
type DiMutexServer interface {
	RequestAccess(context.Context, *AccessRequest) (*AccessGrant, error)
	AnswerRequest(context.Context, *AccessRequest) (*RequestAnswer, error)
	//rpc GrantAccess () returns () {} //when a node has been decided to get access -> måske ikke nødvendigt hvis logikken der finder "vinderen" laves i RequestAccess?
	ReleaseAccess(context.Context, *ReleaseMessage) (*ReleaseMessage, error)
	HoldAndRelease(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedDiMutexServer()
}

// UnimplementedDiMutexServer must be embedded to have forward compatible implementations.
type UnimplementedDiMutexServer struct {
}

func (UnimplementedDiMutexServer) RequestAccess(context.Context, *AccessRequest) (*AccessGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedDiMutexServer) AnswerRequest(context.Context, *AccessRequest) (*RequestAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerRequest not implemented")
}
func (UnimplementedDiMutexServer) ReleaseAccess(context.Context, *ReleaseMessage) (*ReleaseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAccess not implemented")
}
func (UnimplementedDiMutexServer) HoldAndRelease(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldAndRelease not implemented")
}
func (UnimplementedDiMutexServer) mustEmbedUnimplementedDiMutexServer() {}

// UnsafeDiMutexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiMutexServer will
// result in compilation errors.
type UnsafeDiMutexServer interface {
	mustEmbedUnimplementedDiMutexServer()
}

func RegisterDiMutexServer(s grpc.ServiceRegistrar, srv DiMutexServer) {
	s.RegisterService(&DiMutex_ServiceDesc, srv)
}

func _DiMutex_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiMutexServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiMutex.DiMutex/RequestAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiMutexServer).RequestAccess(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiMutex_AnswerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiMutexServer).AnswerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiMutex.DiMutex/AnswerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiMutexServer).AnswerRequest(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiMutex_ReleaseAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiMutexServer).ReleaseAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiMutex.DiMutex/ReleaseAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiMutexServer).ReleaseAccess(ctx, req.(*ReleaseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiMutex_HoldAndRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiMutexServer).HoldAndRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiMutex.DiMutex/HoldAndRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiMutexServer).HoldAndRelease(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DiMutex_ServiceDesc is the grpc.ServiceDesc for DiMutex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiMutex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DiMutex.DiMutex",
	HandlerType: (*DiMutexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAccess",
			Handler:    _DiMutex_RequestAccess_Handler,
		},
		{
			MethodName: "AnswerRequest",
			Handler:    _DiMutex_AnswerRequest_Handler,
		},
		{
			MethodName: "ReleaseAccess",
			Handler:    _DiMutex_ReleaseAccess_Handler,
		},
		{
			MethodName: "HoldAndRelease",
			Handler:    _DiMutex_HoldAndRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dimutex.proto",
}
